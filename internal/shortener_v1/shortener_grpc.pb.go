// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: api/shortener_v1/shortener.proto

package shortener_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortenerV1Client is the client API for ShortenerV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerV1Client interface {
	Get(ctx context.Context, in *ShortLink, opts ...grpc.CallOption) (*OriginalLink, error)
	Post(ctx context.Context, in *OriginalLink, opts ...grpc.CallOption) (*ShortLink, error)
}

type shortenerV1Client struct {
	cc grpc.ClientConnInterface
}

func NewShortenerV1Client(cc grpc.ClientConnInterface) ShortenerV1Client {
	return &shortenerV1Client{cc}
}

func (c *shortenerV1Client) Get(ctx context.Context, in *ShortLink, opts ...grpc.CallOption) (*OriginalLink, error) {
	out := new(OriginalLink)
	err := c.cc.Invoke(ctx, "/shortener_v1.ShortenerV1/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerV1Client) Post(ctx context.Context, in *OriginalLink, opts ...grpc.CallOption) (*ShortLink, error) {
	out := new(ShortLink)
	err := c.cc.Invoke(ctx, "/shortener_v1.ShortenerV1/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerV1Server is the server API for ShortenerV1 service.
// All implementations must embed UnimplementedShortenerV1Server
// for forward compatibility
type ShortenerV1Server interface {
	Get(context.Context, *ShortLink) (*OriginalLink, error)
	Post(context.Context, *OriginalLink) (*ShortLink, error)
	mustEmbedUnimplementedShortenerV1Server()
}

// UnimplementedShortenerV1Server must be embedded to have forward compatible implementations.
type UnimplementedShortenerV1Server struct {
}

func (UnimplementedShortenerV1Server) Get(context.Context, *ShortLink) (*OriginalLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedShortenerV1Server) Post(context.Context, *OriginalLink) (*ShortLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (UnimplementedShortenerV1Server) mustEmbedUnimplementedShortenerV1Server() {}

// UnsafeShortenerV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerV1Server will
// result in compilation errors.
type UnsafeShortenerV1Server interface {
	mustEmbedUnimplementedShortenerV1Server()
}

func RegisterShortenerV1Server(s grpc.ServiceRegistrar, srv ShortenerV1Server) {
	s.RegisterService(&ShortenerV1_ServiceDesc, srv)
}

func _ShortenerV1_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener_v1.ShortenerV1/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).Get(ctx, req.(*ShortLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerV1_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OriginalLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener_v1.ShortenerV1/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).Post(ctx, req.(*OriginalLink))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenerV1_ServiceDesc is the grpc.ServiceDesc for ShortenerV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenerV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener_v1.ShortenerV1",
	HandlerType: (*ShortenerV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ShortenerV1_Get_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _ShortenerV1_Post_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/shortener_v1/shortener.proto",
}
